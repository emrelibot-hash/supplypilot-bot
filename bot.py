import os, json, logging
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters, CallbackContext
from google.oauth2 import service_account
from googleapiclient.discovery import build

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø –∫ Google
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_CREDS_JSON = json.loads(os.getenv("GOOGLE_CREDS_JSON"))

# ID —Ç–≤–æ–µ–π Google-—Ç–∞–±–ª–∏—Ü—ã (–∏–∑ URL)
SPREADSHEET_ID = "1GL0_wzT3OaFBPQk6opiDaSdel4uVzpr_lcTbJtBNlxk"
# –ò–º—è –ª–∏—Å—Ç–∞, –∫—É–¥–∞ –ø–∏—Å–∞—Ç—å (–æ–±—ã—á–Ω–æ Sheet1)
SHEET_NAME = "Sheet1"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask
bot = Bot(token=TELEGRAM_TOKEN)
app = Flask(__name__)
dispatcher = Dispatcher(bot, None, workers=0, use_context=True)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
creds = service_account.Credentials.from_service_account_info(GOOGLE_CREDS_JSON, scopes=SCOPES)
sheets_service = build('sheets', 'v4', credentials=creds)

# /start
def start(update: Update, context: CallbackContext):
    update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç, –ù–∏–∑–∞–º–∏! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

# /test ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ Google Sheets
def test(update: Update, context: CallbackContext):
    body = {"values": [["‚úÖ Bot connected"]]}
    sheets_service.spreadsheets().values().update(
        spreadsheetId=SPREADSHEET_ID,
        range=f"{SHEET_NAME}!A1",
        valueInputOption="RAW",
        body=body
    ).execute()
    update.message.reply_text("‚úÖ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

# –≠—Ö–æ-—Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def echo(update: Update, context: CallbackContext):
    update.message.reply_text(f"–ü–æ–ª—É—á–µ–Ω–æ: {update.message.text}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("test", test))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))

# Webhook-—Ä–æ—É—Ç
@app.route("/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
