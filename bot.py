import os
import re
import requests
from flask import Flask, request
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN     = os.environ["TELEGRAM_TOKEN"]
SPREADSHEET_ID     = os.environ["SPREADSHEET_ID"]
CREDS_PATH         = os.environ.get("GOOGLE_CREDS_PATH", "vika-bot.json")
API_URL            = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# === Google Sheets API ===
if not os.path.exists(CREDS_PATH):
    raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {CREDS_PATH!r}")

creds = service_account.Credentials.from_service_account_file(
    CREDS_PATH,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
sheets = build("sheets", "v4", credentials=creds)

# –ü–æ–ª—É—á–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è /test
meta = sheets.spreadsheets().get(spreadsheetId=SPREADSHEET_ID).execute()
FIRST_SHEET = meta["sheets"][0]["properties"]["title"]

# === Flask & Telegram ===
app = Flask(__name__)

def send_message(chat_id: int, text: str):
    requests.post(
        f"{API_URL}/sendMessage",
        json={"chat_id": chat_id, "text": text}
    )

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    msg  = data.get("message", {})
    chat = msg.get("chat", {})
    text = msg.get("text", "").strip()
    chat_id = chat.get("id")

    if not chat_id:
        return "ok", 200

    lower = text.lower()
    # /start
    if lower.startswith("/start"):
        send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å.")
        return "ok", 200

    # /test
    if lower.startswith("/test"):
        try:
            sheets.spreadsheets().values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f"'{FIRST_SHEET}'!A1",
                valueInputOption="RAW",
                body={"values":[["‚úÖ Bot connected"]]}
            ).execute()
            send_message(chat_id, f"‚úÖ –Ø—á–µ–π–∫–∞ A1 –ª–∏—Å—Ç–∞ ¬´{FIRST_SHEET}¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        except HttpError as e:
            send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: " + str(e))
        return "ok", 200

    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å ¬´–°–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É ‚Ä¶¬ª –∏ BOQ
    trigger = None
    for kw in ["—Å–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É", "—Å–¥–µ–ª–∞–π —Ç–∞–±–ª–∏—Ü—É", "—Å–æ–∑–¥–∞–π", "—Å–¥–µ–ª–∞–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"]:
        if lower.startswith(kw):
            trigger = kw
            break

    if trigger:
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥: ¬´–°–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É –ù–∞–∑–≤–∞–Ω–∏–µ¬ª
        header, *lines = text.splitlines()
        # –≤—ã—Ä–µ–∑–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        proj_name = header[len(trigger):].strip(" ¬´¬ª:‚Äì-")
        if not proj_name:
            send_message(chat_id, "‚ùó –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
            return "ok", 200

        # 1) –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            sheets.spreadsheets().batchUpdate(
                spreadsheetId=SPREADSHEET_ID,
                body={"requests":[{"addSheet":{"properties":{"title":proj_name}}}]}
            ).execute()
        except HttpError as e:
            # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            if "already exists" not in e.error_details[0]:
                send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞: {e}")
                return "ok", 200

        # 2) –ü—Ä–æ–±–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_row = [["‚Ññ", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–¶–µ–Ω–∞", "–ò–Ω–∫–æ—Ç–µ—Ä–º—Å", "–õ–æ–∫–∞—Ü–∏—è"]]
        sheets.spreadsheets().values().update(
            spreadsheetId=SPREADSHEET_ID,
            range=f"'{proj_name}'!A1:E1",
            valueInputOption="RAW",
            body={"values": header_row}
        ).execute()

        # 3) –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É BOQ
        values = []
        pattern = re.compile(r"^(.+?)\s+([\d.,]+\s*\w+/\w+)\s+(\w+)\s+(.+)$")
        for idx, line in enumerate(lines, start=1):
            m = pattern.match(line.strip())
            if not m:
                continue
            supplier, price, inc, loc = m.groups()
            values.append([idx, supplier, price, inc, loc])

        # 4) –î–æ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if values:
            sheets.spreadsheets().values().append(
                spreadsheetId=SPREADSHEET_ID,
                range=f"'{proj_name}'!A2",
                valueInputOption="RAW",
                insertDataOption="INSERT_ROWS",
                body={"values": values}
            ).execute()
            send_message(chat_id, f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ ¬´{proj_name}¬ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ ({len(values)} —Å—Ç—Ä–æ–∫).")
        else:
            send_message(chat_id, "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ BOQ.")
        return "ok", 200

    # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —ç—Ö–æ
    send_message(chat_id, f"–ü–æ–ª—É—á–µ–Ω–æ: {text}")
    return "ok", 200

if __name__ == "__main__":
    # –ø–æ—Ä—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ $PORT, –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî 5000
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
