import os
import time
import json
import requests

from google.oauth2 import service_account
from googleapiclient.discovery import build

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî‚Äî‚Äî
TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN")  # –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_URL          = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
SPREADSHEET_ID   = "16KY51jQAXWc9j2maNw_XwA2uIcCX5ApIZblDahYQJcU"  # –Ω–æ–≤—ã–π ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
CREDS_PATH       = os.getenv("GOOGLE_CREDS_PATH", "vika-bot.json")

# ‚Äî‚Äî‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API ‚Äî‚Äî‚Äî
creds = service_account.Credentials.from_service_account_file(
    CREDS_PATH,
    scopes=["https://www.googleapis.com/auth/spreadsheets"],
)
sheets_service = build("sheets", "v4", credentials=creds)
# —É–∑–Ω–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞
meta = sheets_service.spreadsheets().get(spreadsheetId=SPREADSHEET_ID).execute()
FIRST_SHEET = meta["sheets"][0]["properties"]["title"]


def send_message(chat_id: int, text: str):
    requests.post(
        f"{API_URL}/sendMessage",
        json={"chat_id": chat_id, "text": text}
    )


def handle_update(message: dict):
    chat_id = message["chat"]["id"]
    text = message.get("text", "")

    if text.startswith("/start"):
        send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return

    if text.startswith("/test"):
        # –æ–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É A1 –Ω–∞ –ø–µ—Ä–≤–æ–º –ª–∏—Å—Ç–µ
        rng = f"'{FIRST_SHEET}'!A1"
        body = {"values": [["‚úÖ Bot connected (polling)"]]}
        sheets_service.spreadsheets().values().update(
            spreadsheetId=SPREADSHEET_ID,
            range=rng,
            valueInputOption="RAW",
            body=body
        ).execute()
        send_message(chat_id, f"‚úÖ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –ª–∏—Å—Ç–µ ¬´{FIRST_SHEET}¬ª.")
        return

    # –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —ç—Ö–æ
    send_message(chat_id, f"–ü–æ–ª—É—á–µ–Ω–æ: {text}")


def get_updates(offset=None, timeout=60):
    params = {"timeout": timeout}
    if offset:
        params["offset"] = offset
    resp = requests.get(f"{API_URL}/getUpdates", params=params)
    result = resp.json()
    return result.get("result", [])


if __name__ == "__main__":
    print("Polling bot started‚Ä¶")
    last_update_id = None

    while True:
        try:
            updates = get_updates(offset=last_update_id, timeout=30)
            for upd in updates:
                last_update_id = upd["update_id"] + 1
                if "message" in upd:
                    handle_update(upd["message"])
        except Exception as e:
            # –Ω–∞ –æ—à–∏–±–∫–∞—Ö –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            print("Error in polling loop:", e)
            time.sleep(5)
