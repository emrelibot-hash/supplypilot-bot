import os
import re
import requests
import openai
import pandas as pd
from flask import Flask, request
from google.oauth2 import service_account
from googleapiclient.discovery import build

# --- –ö–æ–Ω—Ñ–∏–≥ API-–∫–ª—é—á–µ–π –∏ –ø—É—Ç–µ–π ---
TELEGRAM_TOKEN    = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY    = os.getenv("OPENAI_API_KEY")
GOOGLE_CREDS_PATH = os.getenv("GOOGLE_CREDS_PATH", "vika-bot.json")
SPREADSHEET_ID    = "1GL0_wzT3OaFBPQk6opiDaSdel4uVzpr_lcTbJtBNlxk"
EXCHANGE_API_URL  = "https://api.exchangerate-api.com/v4/latest/USD"

openai.api_key = OPENAI_API_KEY

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è RFQ-–ø–∞—Ä—Å–∏–Ω–≥–∞ ---
INCOTERMS       = {"EXW","FCA","FAS","FOB","CFR","CIF","CPT","CIP","DAT","DAP","DDP"}
UNITS           = {"kg","g","ton","t","unit","pcs","piece","m","m2","m3"}
CURRENCIES      = {"USD","EUR","AZN","RUB","GEL"}
CREATE_TRIGGERS = [
    "—Å–æ–∑–¥–∞–π ",
    "—Å–¥–µ–ª–∞–π ",
    "—Å–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É ",
    "—Å–¥–µ–ª–∞–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É ",
    "–¥–æ–±–∞–≤—å —Ç–∞–±–ª–∏—Ü—É "
]

exchange_rates = {}

def get_usd_rate(cur: str) -> float:
    cur = cur.upper()
    if cur == "USD":
        return 1.0
    global exchange_rates
    if not exchange_rates:
        exchange_rates.update(requests.get(EXCHANGE_API_URL).json().get("rates", {}))
    return exchange_rates.get(cur, 1.0)

def translate_via_gpt(text: str) -> str:
    resp = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a helpful translation assistant."},
            {"role": "user",   "content": f"Please translate to English, preserving technical terms and units:\n\n{text}"}
        ],
        temperature=0
    )
    return resp.choices[0].message.content.strip()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
creds  = service_account.Credentials.from_service_account_file(
    GOOGLE_CREDS_PATH,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
sheets = build("sheets", "v4", credentials=creds)

app = Flask(__name__)

def send_message(chat_id: int, text: str):
    requests.post(
        f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
        json={"chat_id": chat_id, "text": text}
    )

@app.route("/webhook", methods=["POST"])
def webhook():
    data    = request.get_json(force=True)
    msg     = data.get("message", {})
    chat_id = msg.get("chat", {}).get("id")
    text    = (msg.get("text") or "").strip()
    lower   = text.lower()

    if not chat_id:
        return "ok", 200

    # --- –ê–≤—Ç–æ-BOQ –ø–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º—É .xlsx/.xls –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ---
    if msg.get("document") and not text:
        fn   = msg["document"].get("file_name", "").lower()
        mime = msg["document"].get("mime_type", "")
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –∏ mime_type
        if fn.endswith((".xlsx", ".xls")) and \
           mime in ("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "application/vnd.ms-excel"):
            project = os.path.splitext(fn)[0]

            # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É BOQ
            meta     = sheets.spreadsheets().get(spreadsheetId=SPREADSHEET_ID).execute()
            existing = [s["properties"]["title"] for s in meta["sheets"]
                        if s["properties"]["title"].startswith("BOQ-")]
            idx    = len(existing) + 1
            title  = f"BOQ-{idx}"
            resp   = sheets.spreadsheets().batchUpdate(
                spreadsheetId=SPREADSHEET_ID,
                body={"requests":[{"addSheet":{"properties":{"title":title}}}]}
            ).execute()
            sheet_id = resp["replies"][0]["addSheet"]["properties"]["sheetId"]
            link     = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/edit#gid={sheet_id}"

            # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_id = msg["document"]["file_id"]
            r       = requests.get(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getFile?file_id={file_id}"
            ).json()
            path    = r["result"]["file_path"]
            dl      = requests.get(f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{path}")
            with open("/tmp/tmp.xlsx", "wb") as f:
                f.write(dl.content)

            # —á–∏—Ç–∞–µ–º —á–µ—Ä–µ–∑ openpyxl
            df    = pd.read_excel("/tmp/tmp.xlsx", header=None, dtype=str, engine="openpyxl")
            table = df.fillna("").values.tolist()

            # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É —á–µ—Ä–µ–∑ GPT
            translated = []
            for row in table:
                tr_row = []
                for cell in row:
                    txt = (cell or "").strip()
                    tr_row.append(translate_via_gpt(txt) if txt else "")
                translated.append(tr_row)

            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheet
            sheets.spreadsheets().values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f"'{title}'!A1",
                valueInputOption="RAW",
                body={"values": translated}
            ).execute()

            send_message(
                chat_id,
                f"‚úî –ê–≤—Ç–æ-BOQ: –ª–∏—Å—Ç {title} –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ¬´{project}¬ª —Å–æ–∑–¥–∞–Ω –∏ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω:\n{link}"
            )
            return "ok", 200

        else:
            send_message(chat_id, "‚ö† –≠—Ç–æ –Ω–µ Excel-—Ñ–∞–π–ª, –∞–≤—Ç–æ-BOQ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            return "ok", 200

    # /start
    if lower.startswith("/start"):
        send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤.")
        return "ok", 200

    # /test
    if lower.startswith("/test"):
        meta  = sheets.spreadsheets().get(spreadsheetId=SPREADSHEET_ID).execute()
        title = meta["sheets"][0]["properties"]["title"]
        sheets.spreadsheets().values().update(
            spreadsheetId=SPREADSHEET_ID,
            range=f"'{title}'!A1",
            valueInputOption="RAW",
            body={"values":[["‚úÖ Bot connected"]]}
        ).execute()
        send_message(chat_id, f"‚úÖ –õ–∏—Å—Ç ¬´{title}¬ª –æ–±–Ω–æ–≤–ª—ë–Ω.")
        return "ok", 200

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä: ¬´—Å–æ–∑–¥–∞–π‚Ä¶¬ª
    for trig in CREATE_TRIGGERS:
        if lower.startswith(trig):
            # ‚Ä¶ –æ—Å—Ç–∞–ª—å–Ω–æ–π RFQ/BOQ –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Ä¶
            break

    # –§–æ–ª–±—ç–∫
    send_message(chat_id, f"–ü–æ–ª—É—á–µ–Ω–æ: {text}")
    return "ok", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT",5000)))
