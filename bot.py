import os
import json
import re
import requests
from flask import Flask, request
from google.oauth2 import service_account
from googleapiclient.discovery import build

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL        = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

SPREADSHEET_ID = "1GL0_wzT3OaFBPQk6opiDaSdel4uVzpr_lcTbJtBNlxk"
CREDS_PATH     = os.getenv("GOOGLE_CREDS_PATH", "vika-bot.json")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets API
creds   = service_account.Credentials.from_service_account_file(
    CREDS_PATH,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
service = build("sheets", "v4", credentials=creds)

app = Flask(__name__)

def send_message(chat_id: int, text: str):
    requests.post(
        f"{API_URL}/sendMessage",
        json={"chat_id": chat_id, "text": text}
    )

@app.route("/webhook", methods=["POST"])
def webhook():
    data    = request.get_json(force=True)
    msg     = data.get("message", {})
    chat_id = msg.get("chat", {}).get("id")
    text    = msg.get("text", "")

    if not chat_id:
        return "ok", 200

    # 1) /start
    if text.startswith("/start"):
        send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç, –ù–∏–∑–∞–º–∏! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

    # 2) /test ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ Google Sheets
    elif text.startswith("/test"):
        meta        = service.spreadsheets().get(spreadsheetId=SPREADSHEET_ID).execute()
        first_title = meta["sheets"][0]["properties"]["title"]
        range_name  = f"'{first_title}'!A1"
        service.spreadsheets().values().update(
            spreadsheetId=SPREADSHEET_ID,
            range=range_name,
            valueInputOption="RAW",
            body={"values":[["‚úÖ Bot connected"]]}
        ).execute()
        send_message(chat_id, f"‚úÖ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –ª–∏—Å—Ç–µ ¬´{first_title}¬ª.")

    # 3) –°–æ–∑–¥–∞—Ç—å RFQ <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞>
    elif text.lower().startswith("—Å–æ–∑–¥–∞—Ç—å rfq"):
        project_name = text[len("—Å–æ–∑–¥–∞—Ç—å rfq"):].strip()
        meta         = service.spreadsheets().get(spreadsheetId=SPREADSHEET_ID).execute()
        existing     = [
            s["properties"]["title"]
            for s in meta["sheets"]
            if s["properties"]["title"].startswith("RFQ-")
        ]
        next_num = len(existing) + 1
        new_title = f"RFQ-{next_num}"
        batch     = {"requests":[{"addSheet":{"properties":{"title":new_title}}}]}
        resp      = service.spreadsheets().batchUpdate(
            spreadsheetId=SPREADSHEET_ID, body=batch
        ).execute()
        sheet_id  = resp["replies"][0]["addSheet"]["properties"]["sheetId"]
        headers   = [["–ü–æ—Å—Ç–∞–≤—â–∏–∫","–¶–µ–Ω–∞ USD","–£—Å–ª–æ–≤–∏—è","–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]]
        service.spreadsheets().values().update(
            spreadsheetId=SPREADSHEET_ID,
            range=f"'{new_title}'!A1",
            valueInputOption="RAW",
            body={"values":headers}
        ).execute()
        link = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/edit#gid={sheet_id}"
        send_message(chat_id, f"‚úî –õ–∏—Å—Ç {new_title} –¥–ª—è ¬´{project_name}¬ª —Å–æ–∑–¥–∞–Ω: {link}")

    # 4) –î–æ–±–∞–≤—å –ö–ü –∫ RFQ-‚Ä¶
    elif text.lower().startswith("–¥–æ–±–∞–≤—å –∫–ø –∫ rfq-"):
        head, _, body = text.partition(":")
        rfq_label     = head.strip().split()[-1].upper()
        lines         = [l.strip() for l in body.strip().splitlines() if l.strip()]
        rows = []
        for line in lines:
            if "‚Äî" in line:
                sup, rest = line.split("‚Äî",1)
            elif "-" in line:
                sup, rest = line.split("-",1)
            else:
                continue
            price_terms = rest.strip().split()
            price       = price_terms[0]
            terms       = " ".join(price_terms[1:]) if len(price_terms)>1 else ""
            rows.append([sup.strip(), price, terms, ""])
        service.spreadsheets().values().append(
            spreadsheetId=SPREADSHEET_ID,
            range=f"'{rfq_label}'!A2",
            valueInputOption="RAW",
            insertDataOption="INSERT_ROWS",
            body={"values":rows}
        ).execute()
        send_message(chat_id, f"‚û° –î–æ–±–∞–≤–ª–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫(–∏) –≤ —Ç–∞–±–ª–∏—Ü—É {rfq_label}.")

    # 5) –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç RFQ-‚Ä¶
    elif text.lower().startswith("–ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç rfq-"):
        rfq_label = text.strip().split()[-1].upper()
        meta      = service.spreadsheets().get(spreadsheetId=SPREADSHEET_ID).execute()
        sheet_info = next(s for s in meta["sheets"]
                          if s["properties"]["title"] == rfq_label)
        sheet_id = sheet_info["properties"]["sheetId"]
        data     = service.spreadsheets().values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=f"'{rfq_label}'!B2:B"
        ).execute().get("values", [])
        prices = []
        for row in data:
            m = re.search(r"[\d,.]+", row[0]) if row else None
            prices.append(float(m.group().replace(",", ".")) if m else float('inf'))
        if not prices:
            send_message(chat_id, f"‚ùó –í —Ç–∞–±–ª–∏—Ü–µ {rfq_label} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
            return "ok", 200
        best_idx = prices.index(min(prices))
        # –°–±—Ä–æ—Å —Ñ–æ–Ω–∞
        reqs = [{"repeatCell": {
                    "range":{"sheetId":sheet_id,
                             "startRowIndex":1,
                             "endRowIndex":1+len(prices),
                             "startColumnIndex":0,
                             "endColumnIndex":4},
                    "cell":{"userEnteredFormat":{"backgroundColor":None}},
                    "fields":"userEnteredFormat.backgroundColor"
                }},
                {"repeatCell": {
                    "range":{"sheetId":sheet_id,
                             "startRowIndex":1+best_idx,
                             "endRowIndex":2+best_idx,
                             "startColumnIndex":0,
                             "endColumnIndex":4},
                    "cell":{"userEnteredFormat":{"backgroundColor":{
                        "red":0.8,"green":1.0,"blue":0.8
                    }}},
                    "fields":"userEnteredFormat.backgroundColor"
                }}]
        service.spreadsheets().batchUpdate(
            spreadsheetId=SPREADSHEET_ID,
            body={"requests":reqs}
        ).execute()
        send_message(chat_id, f"‚úÖ –õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ {rfq_label} (—Å—Ç—Ä–æ–∫–∞ {best_idx+2}) –ø–æ–¥—Å–≤–µ—á–µ–Ω.")

    # 6) –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —ç—Ö–æ
    else:
        send_message(chat_id, f"–ü–æ–ª—É—á–µ–Ω–æ: {text}")

    return "ok", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
