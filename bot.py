import os
import re
import requests
from flask import Flask, request
from google.oauth2 import service_account
from googleapiclient.discovery import build

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN")
API_URL          = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
SPREADSHEET_ID   = "1GL0_wzT3OaFBPQk6opiDaSdel4uVzpr_lcTbJtBNlxk"
CREDS_PATH       = os.getenv("GOOGLE_CREDS_PATH", "vika-bot.json")
EXCHANGE_API_URL = "https://api.exchangerate-api.com/v4/latest/USD"

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
INCOTERMS       = {"EXW","FCA","FAS","FOB","CFR","CIF","CPT","CIP","DAT","DAP","DDP"}
UNITS           = {"kg","g","ton","t","unit","pcs","piece","m","m2","m3"}
CURRENCIES      = {"USD","EUR","AZN","RUB","GEL"}
CREATE_TRIGGERS = [
    "—Å–æ–∑–¥–∞–π ",
    "—Å–¥–µ–ª–∞–π ",
    "—Å–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É ",
    "—Å–¥–µ–ª–∞–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É ",
    "–¥–æ–±–∞–≤—å —Ç–∞–±–ª–∏—Ü—É "
]

exchange_rates = {}

def get_usd_rate(cur: str) -> float:
    cur = cur.upper()
    if cur == "USD": return 1.0
    global exchange_rates
    if not exchange_rates:
        exchange_rates.update(requests.get(EXCHANGE_API_URL).json().get("rates", {}))
    return exchange_rates.get(cur, 1.0)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
creds   = service_account.Credentials.from_service_account_file(
    CREDS_PATH, scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
service = build("sheets", "v4", credentials=creds)

app = Flask(__name__)

def send_message(chat_id: int, text: str):
    requests.post(f"{API_URL}/sendMessage", json={"chat_id": chat_id, "text": text})

@app.route("/webhook", methods=["POST"])
def webhook():
    data    = request.get_json(force=True)
    msg     = data.get("message", {})
    chat_id = msg.get("chat", {}).get("id")
    text    = (msg.get("text") or "").strip()
    lower   = text.lower()

    if not chat_id:
        return "ok", 200

    # /start
    if lower.startswith("/start"):
        send_message(chat_id, "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –º–∏–ª—ã–π! –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ç–µ–±—è? ")
        return "ok", 200

    # /test
    if lower.startswith("/test"):
        meta  = service.spreadsheets().get(spreadsheetId=SPREADSHEET_ID).execute()
        title = meta["sheets"][0]["properties"]["title"]
        service.spreadsheets().values().update(
            spreadsheetId=SPREADSHEET_ID,
            range=f"'{title}'!A1",
            valueInputOption="RAW",
            body={"values":[["‚úÖ Bot connected"]]}
        ).execute()
        send_message(chat_id, f"‚úÖ –õ–∏—Å—Ç ¬´{title}¬ª –æ–±–Ω–æ–≤–ª—ë–Ω.")
        return "ok", 200

    # –°–æ–∑–¥–∞–Ω–∏–µ RFQ-–ª–∏—Å—Ç–∞ + –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –ö–ü –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏)
    for trig in CREATE_TRIGGERS:
        if lower.startswith(trig):
            lines = text.splitlines()
            project = lines[0][len(trig):].strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"

            # 1) –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç
            meta     = service.spreadsheets().get(spreadsheetId=SPREADSHEET_ID).execute()
            idx      = len([s for s in meta["sheets"] if s["properties"]["title"].startswith("RFQ-")]) + 1
            title    = f"RFQ-{idx}"
            resp     = service.spreadsheets().batchUpdate(
                spreadsheetId=SPREADSHEET_ID,
                body={"requests":[{"addSheet":{"properties":{"title":title}}}]}
            ).execute()
            sid = resp["replies"][0]["addSheet"]["properties"]["sheetId"]

            # 2) –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–ø–∫–∏
            reqs = [{
                "updateSheetProperties": {
                    "properties": {"sheetId":sid,"gridProperties":{"frozenRowCount":5}},
                    "fields":"gridProperties.frozenRowCount"
                }
            }]
            status = [("–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",{"red":0,"green":1,"blue":0}),
                      ("–û–∂–∏–¥–∞–µ—Ç—Å—è",{"red":1,"green":0.6,"blue":0}),
                      ("–í —Ä–∞–±–æ—Ç–µ",{"red":1,"green":1,"blue":0})]
            cols = 6
            for i,(lbl,color) in enumerate(status):
                reqs += [
                    {"mergeCells":{"range":{"sheetId":sid,"startRowIndex":i,"endRowIndex":i+1,
                                             "startColumnIndex":0,"endColumnIndex":cols},
                                   "mergeType":"MERGE_ALL"}},
                    {"repeatCell":{"range":{"sheetId":sid,"startRowIndex":i,"endRowIndex":i+1,
                                             "startColumnIndex":0,"endColumnIndex":cols},
                                   "cell":{"userEnteredFormat":{"backgroundColor":color}},
                                   "fields":"userEnteredFormat.backgroundColor"}},
                    {"updateCells":{"rows":[{"values":[{"userEnteredValue":{"stringValue":lbl},
                                                          "userEnteredFormat":{"horizontalAlignment":"CENTER"}}]}],
                                    "fields":"userEnteredValue,userEnteredFormat.horizontalAlignment",
                                    "start":{"sheetId":sid,"rowIndex":i,"columnIndex":0}}}
                ]
            # —Å–µ—Ä—ã–π —Ñ–æ–Ω —Å—Ç—Ä–æ–∫ 4 –∏ 5
            for i in (3,4):
                reqs.append({
                    "repeatCell":{"range":{"sheetId":sid,"startRowIndex":i,"endRowIndex":i+1,
                                           "startColumnIndex":0,"endColumnIndex":cols},
                                  "cell":{"userEnteredFormat":{"backgroundColor":{"red":0.6,"green":0.6,"blue":0.6}}},
                                  "fields":"userEnteredFormat.backgroundColor"}
                })
            service.spreadsheets().batchUpdate(
                spreadsheetId=SPREADSHEET_ID, body={"requests":reqs}
            ).execute()

            # 3) –®–∞–ø–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—Ä–æ–∫–∏ 4‚Äì5: –±–µ–∑ –∂—ë—Å—Ç–∫–∏—Ö –∏–º—ë–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            headers = [
                ["‚Ññ","–ü—Ä–æ–¥—É–∫—Ü–∏—è","–ï–¥. –∏–∑–º.","–ö–æ–ª-–≤–æ","–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏","",""],
                ["","","","","","",""]
            ]
            service.spreadsheets().values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f"'{title}'!A4",
                valueInputOption="RAW",
                body={"values":headers}
            ).execute()

            link = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/edit#gid={sid}"

            # 4) –ü–∞—Ä—Å–∏–Ω–≥ –ö–ü (–µ—Å–ª–∏ –µ—Å—Ç—å)
            kp = lines[1:]
            rows=[]; usd_vals=[]; seen=set()
            pat = re.compile(
                rf'(?P<price>[\d\.,]+)\s*(?P<currency>{"|".join(CURRENCIES)})?'
                rf'(?:\/\s*(?P<unit>{"|".join(UNITS)}))?', flags=re.IGNORECASE
            )
            for ln in kp:
                l=ln.strip()
                m=pat.search(l)
                if not m: continue
                s,e=m.span()
                sup=l[:s].strip("‚Äî-: ").title()
                if sup.lower() in seen: continue
                seen.add(sup.lower())
                num=m.group("price").replace(",",".")
                cur=(m.group("currency") or "USD").upper()
                unit=(m.group("unit") or "").lower()
                rate=get_usd_rate(cur); usd=float(num)/rate; usd_vals.append(usd)
                tail=l[e:].strip("‚Äî-: ").split()
                inc=next((p.upper() for p in tail if p.upper() in INCOTERMS), "")
                if inc in tail: tail.remove(inc)
                cond=" ".join(tail)
                rows.append([sup, f"{num} {cur}", unit, inc, cond, ""])
            if rows:
                service.spreadsheets().values().append(
                    spreadsheetId=SPREADSHEET_ID,
                    range=f"'{title}'!A2",
                    valueInputOption="RAW",
                    insertDataOption="INSERT_ROWS",
                    body={"values":rows}
                ).execute()
                bi=usd_vals.index(min(usd_vals))
                # —Å–±—Ä–æ—Å —Ü–≤–µ—Ç–∞ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞
                upd=[{"repeatCell":{"range":{"sheetId":sid,"startRowIndex":1,"endRowIndex":1+len(usd_vals),
                                              "startColumnIndex":0,"endColumnIndex":6},
                                     "cell":{"userEnteredFormat":{"backgroundColor":None}},
                                     "fields":"userEnteredFormat.backgroundColor"}},
                     {"repeatCell":{"range":{"sheetId":sid,"startRowIndex":1+bi,"endRowIndex":2+bi,
                                              "startColumnIndex":0,"endColumnIndex":6},
                                     "cell":{"userEnteredFormat":{"backgroundColor":
                                         {"red":0.8,"green":1.0,"blue":0.8}}},
                                     "fields":"userEnteredFormat.backgroundColor"}}]
                service.spreadsheets().batchUpdate(
                    spreadsheetId=SPREADSHEET_ID, body={"requests":upd}
                ).execute()
                send_message(chat_id,
                    f"‚úî –õ–∏—Å—Ç {title} –¥–ª—è ¬´{project}¬ª —Å–æ–∑–¥–∞–Ω: {link}\n‚û° –î–æ–±–∞–≤–ª–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫, "
                    f"–ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (—Å—Ç—Ä–æ–∫–∞ {bi+2}) –ø–æ–¥—Å–≤–µ—á–µ–Ω.")
                return "ok", 200

            send_message(chat_id, f"‚úî –õ–∏—Å—Ç {title} –¥–ª—è ¬´{project}¬ª —Å–æ–∑–¥–∞–Ω: {link}")
            return "ok", 200

    # –Ø–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å –∫ RFQ‚Ä¶¬ª (–æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if re.search(r'–¥–æ–±–∞–≤(?:—å|–∏—Ç—å).*?rfq[\s\-]?(\d+)', lower):
        # –≤–∞—à –∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        return "ok", 200

    # –≠—Ö–æ
    send_message(chat_id, f"–ü–æ–ª—É—á–µ–Ω–æ: {text}")
    return "ok", 200

if __name__=="__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT",5000)))
