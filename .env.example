# .env.example
GOOGLE_FOLDER_ID=your_google_drive_folder_id_here
GOOGLE_SHEET_ID=your_google_sheet_id_here
GOOGLE_CREDS_JSON={"type": "service_account", "project_id": "..."}  # всё в одну строку
POLL_SECONDS=60
DECIMAL_LOCALE=en

# README.md
# SupplyPilot — Google Drive to Sheets Sync

### Как работает:

1. Мониторит папку Drive (`GOOGLE_FOLDER_ID`).
2. У каждого проекта — должна быть структура:

```
<PROJECT_FOLDER>/
  boq/
    boq_file.xlsx
  кп/
    SupplierA/
      offer.xlsx
    SupplierB/
      offer.xlsx
```

3. Бот записывает:
   - BOQ в Google Sheet (GOOGLE_SHEET_ID) — лист <PROJECT_NAME>
   - Сравнивает с коммерческими предложениями

### Старт локально

```bash
pip install -r requirements.txt
python main.py
```

---

# requirements.txt
google-api-python-client
google-auth-httplib2
google-auth-oauthlib
google-auth
pandas
openai
python-dotenv
PyPDF2

# runtime.txt
python-3.10.13

# gpt.py
import openai
import os

openai.api_key = os.getenv("OPENAI_API_KEY")


def extract_boq_using_gpt(file_path):
    with open(file_path, "rb") as f:
        content = f.read()
    text = content.decode("utf-8", errors="ignore")
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "Extract structured BOQ data from raw table text"},
            {"role": "user", "content": text},
        ]
    )
    return response.choices[0].message['content']


def extract_offer_using_gpt(file_path, supplier):
    with open(file_path, "rb") as f:
        content = f.read()
    text = content.decode("utf-8", errors="ignore")
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": f"Extract supplier offer for BOQ comparison. Supplier: {supplier}"},
            {"role": "user", "content": text},
        ]
    )
    return response.choices[0].message['content']


# sheets_client.py
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import json

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(os.environ["GOOGLE_CREDS_JSON"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")

def write_boq_to_sheet(project_name, content):
    sh = client.open_by_key(GOOGLE_SHEET_ID)
    try:
        sh.worksheet(project_name)
        sh.del_worksheet(sh.worksheet(project_name))
    except:
        pass
    ws = sh.add_worksheet(title=project_name, rows="1000", cols="20")
    ws.update("A1", [["No", "Description", "Unit", "Qty", "Notes (System)"]])
    rows = parse_gpt_boq(content)
    if rows:
        ws.append_rows(rows)


def write_offer_to_sheet(project_name, content):
    sh = client.open_by_key(GOOGLE_SHEET_ID)
    ws = sh.worksheet(project_name)
    rows = parse_gpt_offer(content)
    if rows:
        ws.append_rows(rows)


def parse_gpt_boq(text):
    lines = text.split("\n")
    return [line.split("|") for line in lines if line.strip() and "|" in line]


def parse_gpt_offer(text):
    lines = text.split("\n")
    return [line.split("|") for line in lines if line.strip() and "|" in line]
