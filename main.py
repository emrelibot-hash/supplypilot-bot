import os
import io
import json
import openai
import base64
import telebot
import gspread
import mimetypes
import pandas as pd
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv
from telebot.types import Message, Document

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")
TEMPLATE_FILE_ID = "1zKd3hq7R-CI_i0azdZsdIPihBNT-6BlhADW0M0eiGpo"
REGISTRY_SHEET_NAME = "Registry"

openai.api_key = OPENAI_API_KEY
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google API
creds_dict = json.loads(GOOGLE_CREDS_JSON)
creds = ServiceAccountCredentials.from_json_keyfile_dict(
    creds_dict,
    scopes=[
        "https://www.googleapis.com/auth/drive",
        "https://www.googleapis.com/auth/spreadsheets",
    ],
)
client = gspread.authorize(creds)
drive_service = build("drive", "v3", credentials=creds)

def ensure_registry():
    try:
        return client.open_by_key(GOOGLE_SHEET_ID).worksheet(REGISTRY_SHEET_NAME)
    except gspread.exceptions.WorksheetNotFound:
        sheet = client.open_by_key(GOOGLE_SHEET_ID)
        return sheet.add_worksheet(title=REGISTRY_SHEET_NAME, rows="100", cols="3")

def get_next_boq_code():
    registry = ensure_registry()
    existing = registry.col_values(1)[1:]  # skip header
    numbers = [int(row.replace("BOQ-", "")) for row in existing if row.startswith("BOQ-")]
    next_number = max(numbers, default=0) + 1
    return f"BOQ-{next_number:03d}"

def copy_template_sheet(new_title):
    copied_file = drive_service.files().copy(
        fileId=TEMPLATE_FILE_ID,
        body={"name": new_title}
    ).execute()
    return copied_file["id"]
@bot.message_handler(commands=["start"])
def handle_start(message: Message):
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –í–∏–∫–∞.\n\n" +
        "üì• –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n‚Äî Excel —Ñ–∞–π–ª (BOQ) –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n‚Äî PDF —Ñ–∞–π–ª —Å –ö–ü –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å BOQ\n\n" +
        "–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Google Sheets –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
@bot.message_handler(content_types=["document"])
def handle_docs(message: Message):
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        mime_type, _ = mimetypes.guess_type(message.document.file_name)

        if message.document.file_name.endswith(".xlsx"):
            boq_code = get_next_boq_code()
            new_sheet_id = copy_template_sheet(boq_code)

            registry = ensure_registry()
            registry.append_row([boq_code, new_sheet_id, message.document.file_name])

            bot.reply_to(message, f"‚úÖ BOQ-—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –ø—Ä–æ–µ–∫—Ç *{boq_code}*.", parse_mode="Markdown")

        elif message.document.file_name.endswith(".pdf"):
            bot.reply_to(message, "üìå –í–∞—à–∞ PDF –ø–æ–ª—É—á–µ–Ω–∞. –°–µ–π—á–∞—Å –∑–∞–ø—Ä–æ—à—É, –∫ –∫–∞–∫–æ–º—É –ø—Ä–æ–µ–∫—Ç—É –µ—ë –ø—Ä–∏–≤—è–∑–∞—Ç—å...")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

        else:
            bot.reply_to(message, "‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx) –∏ PDF.")

    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
